jobs:

######################
###### windows #######
######################

- job: windows
  timeoutInMinutes: 120
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true
      architecture: 'x64'

  - script: |
      cd $(Build.SourcesDirectory)
      python -m pip install aqtinstall
    displayName: 'Install another (unofficial) Qt (aqt) CLI Installer'

  - script: |
      cd $(Build.SourcesDirectory)
      python -m aqt install -O c:\Qt 5.14.0 windows desktop win64_msvc2017_64
    displayName: 'Install Qt 5.14.0'

  - checkout: self # represents the repo where the initial Pipelines YAML file was found
    submodules: recursive # set to 'recursive' to get submodules of submodules

  # build process
  - bash: ./.ci/ci_build.sh
    env:
      PLATFORM: 'windows'
    condition: succeeded()
    displayName: 'Build windows packages'

################################
###### Publish Releases ########
################################

# - job: PublishReleases
#   timeoutInMinutes: 120
#   dependsOn:
#   - Linux
#   - macOS
#   condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
#   pool:
#     vmImage: ubuntu-16.04

#   steps:
#   - checkout: self # represents the repo where the initial Pipelines YAML file was found

#   # download deployables artifacts
#   - task: DownloadPipelineArtifact@2
#     inputs:
#       path: $(Build.ArtifactStagingDirectory)
#     displayName: Download artifacts

#   # read version file
#   - bash: |
#       echo "##vso[task.setvariable variable=semVer]$(cat version)"
#       echo "##vso[task.setvariable variable=preRel]$(grep -oE 'alpha|beta' version)"
#     workingDirectory: '$(Build.SourcesDirectory)'
#     condition: succeeded()
#     displayName: 'Read and generate pipeline variables'

#   # set release to pre-release
#   - bash: echo '##vso[task.setvariable variable=preRelease;]true'
#     condition: and(succeeded(), or(contains(variables['preRel'], 'alpha'), contains(variables['preRel'], 'beta')), ne(variables['system.pullrequest.isfork'], true), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
#     displayName: 'Mark alpha or beta as pre-release'

#   # create github releases
#   - task: GithubRelease@0
#     inputs: 
#       gitHubConnection: Hyperion-Bot
#       repositoryName: $(Build.Repository.Name)
#       action: create
#       target: $(Build.SourceVersion)
#       tagSource: manual
#       tag: $(Build.SourceBranchName)
#       title: 'Hyperion $(semVer)'
#       assets: |
#         $(Build.ArtifactStagingDirectory)/amd64/*
#         $(Build.ArtifactStagingDirectory)/i386/*
#         $(Build.ArtifactStagingDirectory)/armv6hf/*
#         $(Build.ArtifactStagingDirectory)/armv7hf/*
#         $(Build.ArtifactStagingDirectory)/aarch64/*
#         $(Build.ArtifactStagingDirectory)/macos/*
#       assetUploadMode: 'replace'
#       addChangeLog: false
#       isPreRelease: $(preRelease)
#     condition: succeeded()
#     displayName: Create GitHub releases
