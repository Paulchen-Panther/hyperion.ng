name: GitHub Qt5/6 Builds

on:
  # Reusable from push_pull.yml
  workflow_call:
    inputs:
      qt_version:
        type: string
        description: Build with this Qt version
        default: '5'
        required: false
      event_name:
        type: string
        description: The event name
        default: ''
        required: false
      pull_request_number:
        type: string
        description: The corresponding PR number
        default: ''
        required: false
      publish:
        type: boolean
        description: Package publishing
        default: false
        required: false

jobs:

######################
###### Linux #########
######################

  Linux:
    name: üêß ${{ matrix.os.description }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [
          { distribution: debian, codename: buster,   description: Debian Buster (x86_64),                        architecture: [ amd64, linux/amd64  ], platform: x11 },
          { distribution: debian, codename: buster,   description: Debian Buster (Raspberry Pi 1 & Zero 1),       architecture: [ armv6, linux/arm/v6 ], platform: rpi },
          { distribution: debian, codename: buster,   description: Debian Buster (Raspberry Pi 2),                architecture: [ armv7, linux/arm/v7 ], platform: rpi },
          { distribution: debian, codename: buster,   description: Debian Buster (Raspberry Pi 3/4/5 & Zero 2),   architecture: [ arm64, linux/arm64  ], platform: rpi },
          { distribution: debian, codename: bullseye, description: Debian Bullseye (x86_64),                      architecture: [ amd64, linux/amd64  ], platform: x11 },
          { distribution: debian, codename: bullseye, description: Debian Bullseye (Raspberry Pi 2),              architecture: [ armv7, linux/arm/v7 ], platform: rpi },
          { distribution: debian, codename: bullseye, description: Debian Bullseye (Raspberry Pi 3/4/5 & Zero 2), architecture: [ arm64, linux/arm64  ], platform: rpi }
        ]
        isQt5:
          - ${{ inputs.qt_version == '5' }}
        exclude:
          - isQt5: true
            os: { distribution: debian, codename: bullseye }
          - isQt5: false
            os: { distribution: debian, codename: buster }

    steps:
      - name: ‚¨á Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üîß Prepare
        if: ${{ inputs.event_name == 'pull_request' }}
        shell: bash
        run: |
          tr -d '\n' < .version > temp && mv temp .version
          echo -n "+PR${{ inputs.pull_request_number }}" >> .version

      - name: üë∑ Build
        shell: bash
        run: |
          mkdir deploy
          docker run --rm --platform=${{ matrix.os.architecture[1] }} \
            -v "${{ github.workspace }}/deploy:/deploy" \
            -v "${{ github.workspace }}:/source:rw" \
            -w "/source" \
            ghcr.io/hyperion-project/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            /bin/bash -c "mkdir build &&
            cmake -B build -G Ninja -DPLATFORM=${{ matrix.os.platform }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} &&
            cmake --build build --target package --parallel $(nproc) &&
            cp /source/build/Hyperion-* /deploy/ 2>/dev/null"
        env:
          DOCKER_IMAGE: ${{ matrix.os.distribution }}
          DOCKER_TAG: ${{ matrix.os.codename }}${{ inputs.qt_version == '6' && '-qt6' || '' }}
          BUILD_TYPE: ${{ inputs.event_name == 'pull_request' && 'debug' || 'release' }}

      - name: üì¶ Upload
        if: ${{ inputs.publish || inputs.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.event_name == 'pull_request' && env.NAME || 'artifact' }}
          path: ${{ inputs.event_name == 'pull_request' && 'deploy/*.tar.gz' || 'deploy/Hyperion-*' }}
        env:
          NAME: ${{ format('{0}_{1}_{2}{3}', matrix.os.distribution, matrix.os.codename, matrix.os.architecture[0], inputs.qt_version == '6' && '_qt6' || '') }}

######################
###### macOS #########
######################

  macOS:
    name: üçè macOS (${{ matrix.arrays.arch }})
    runs-on: ${{ matrix.arrays.os }}
    env:
      packages: qt@${{ inputs.qt_version }} cmake ninja libusb jpeg-turbo vulkan-headers
    strategy:
      fail-fast: false
      matrix:
        arrays: [
          { arch: "x86_64", os: "macos-13" },
          { arch: "arm64",  os: "macos-14" }
        ]

    steps:
      - name: ‚¨á Checkout Hyperion.ng
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üîß Append Pull Request number to version (PR  only)
        if: ${{ inputs.event_name == 'pull_request' }}
        shell: bash
        run: tr -d '\n' < .version > temp && mv temp .version && echo -n "+PR${{ inputs.pull_request_number }}" >> .version

      - name: Cache Homebrew Packages
        id: cache-homebrew
        uses: actions/cache@v4
        with:
          path: $(brew --prefix)
          key: ${{ matrix.arrays.arch }}-homebrew-packages

      - name: üì• Install dependencies
        if: steps.cache-homebrew.outputs.cache-hit != 'true'
        shell: bash
        run: |
          brew untap --force homebrew/core homebrew/cask
          brew update || true
          brew install ${{ env.packages }} || true

      - name: üë∑ Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'macos-${{ env.BUILD_TYPE }}'
          buildPreset: 'macos-${{ env.BUILD_TYPE }}'
          buildPresetAdditionalArgs: "['--target package']"
        env:
          BUILD_TYPE: ${{ inputs.event_name == 'pull_request' && 'debug' || 'release' }}

      - name: üì¶ Upload
        if: ${{ inputs.publish || inputs.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.event_name == 'pull_request' && env.NAME || 'artifact' }}
          path: 'build/Hyperion-*'
        env:
          NAME: ${{ inputs.qt_version == '6' && 'macOS_universal_qt6' || 'macOS_x64' }}

######################
###### Windows #######
######################

  windows:
    name: ü™ü Windows (x64)
    runs-on: windows-2022
    env:
      VCINSTALLDIR: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC'
    steps:
      - name: ‚¨á Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: üîß Prepare PR
        if: ${{ inputs.event_name == 'pull_request' }}
        shell: bash
        run: |
          echo '::group::Append PR number to version'
            tr -d '\n' < .version > temp && mv temp .version
            echo -n "+PR${{ inputs.pull_request_number }}" >> .version
          echo '::endgroup::'
          choco config set cacheLocation --value "$Env:GITHUB_WORKSPACE/choco"

      - name: üîß Set Chocolatey cache location
        if: ${{ inputs.event_name == 'pull_request' }}
        shell: bash
        run: choco config set cacheLocation --value "$Env:GITHUB_WORKSPACE/choco"

      - name: üíæ Cache/Restore Chocolatey
        id: cache-chocolatey
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/choco
          key: ${{ runner.os }}${{ inputs.qt_version == '6' && '-chocolatey-qt6' || '-chocolatey' }}

      - name: üì• Install DirectX SDK, OpenSSL, Ninja, libjpeg-turbo ${{ inputs.qt_version == '6' && 'and Vulkan-SDK' || '' }}
        if: steps.cache-chocolatey.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          choco install --no-progress directx-sdk ${{env.VULKAN_SDK}} -y
          choco install --no-progress ${{env.OPENSSL}} -y
          choco install --no-progress ninja -y
          Invoke-WebRequest https://netcologne.dl.sourceforge.net/project/libjpeg-turbo/3.0.1/libjpeg-turbo-3.0.1-vc64.exe -OutFile libjpeg-turbo.exe -UserAgent NativeHost
          .\libjpeg-turbo /S
        env:
          VULKAN_SDK: ${{ inputs.qt_version == '6' && 'vulkan-sdk' || '' }}
          OPENSSL: ${{ inputs.qt_version == '6' && 'openssl' || 'openssl --version=1.1.1.2100' }}

      - name: üì• Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ inputs.qt_version == '6' && '6.5.2' || '5.15.2' }}
          target: 'desktop'
          modules: ${{ inputs.qt_version == '6' && 'qtserialport' || '' }}
          arch: 'win64_msvc2019_64'
          cache: 'true'
          cache-key-prefix: 'cache-qt-windows'

      - name: üõ†Ô∏è Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: üë∑ Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'windows-${{ env.BUILD_TYPE }}'
          buildPreset: 'windows-${{ env.BUILD_TYPE }}'
          buildPresetAdditionalArgs: "['--target package']"
        env:
          BUILD_TYPE: ${{ inputs.event_name == 'pull_request' && 'debug' || 'release' }}

      - name: üì¶ Upload
        if: ${{ inputs.publish || inputs.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.event_name == 'pull_request' && env.NAME || 'artifact' }}
          path: ${{ inputs.event_name == 'pull_request' && 'build/*.exe' || 'build/Hyperion-*' }}
        env:
          NAME: ${{ inputs.qt_version == '6' && 'windows_x64_qt6' || 'windows_x64' }}

#####################################
###### Publish GitHub Releases ######
#####################################

  github_publish:
    name: üöÄ Publish GitHub Releases
    if: ${{ inputs.qt_version == '5' && inputs.publish }}
    needs: [Linux, macOS, windows]
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨á Checkout
        uses: actions/checkout@v4

      - name: üîß Prepare
        run: |
          echo '::group::Generate environment variables from .version and tag'
            echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
            echo "VERSION=$(tr -d '\n' < .version)" >> $GITHUB_ENV
          echo '::endgroup::'

      - name: üíæ Artifact download
        uses: actions/download-artifact@v4.1.0
        with:
          path: artifacts

      - name: üì¶ Upload
        uses: softprops/action-gh-release@v1
        with:
          name: Hyperion ${{ env.VERSION }}
          tag_name: ${{ env.TAG }}
          files: "artifacts/**"
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
