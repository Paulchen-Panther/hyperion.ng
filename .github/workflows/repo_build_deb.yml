name: DEB Packages build for APT Repository

on:
  # Reusable from nightly.yml and push_pull.yml
  workflow_call:
    inputs:
      head_sha:
        type: string
        description: The branch, tag or SHA to checkout
        default: "master"
        required: false
      nightly:
        type: boolean
        description: Nightly build
        default: false
        required: false
      upload:
        type: boolean
        description: Upload Artifacts
        default: false
        required: false

env:
  ghcr: paulchen-panther #hyperion-project

jobs:
  build:
    name: üêß ${{ matrix.os.description }} (${{ matrix.architecture[0] }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [
          { distribution: ubuntu, codename: focal,    description: Ubuntu 20.04 (Focal Fossa),     qt_version: '5' }, # Qt 6 not available
          { distribution: ubuntu, codename: jammy,    description: Ubuntu 22.04 (Jammy Jellyfish), qt_version: '6' },
          { distribution: ubuntu, codename: lunar,    description: Ubuntu 23.04 (Lunar Lobster),   qt_version: '6' },
          { distribution: ubuntu, codename: mantic,   description: Ubuntu 23.10 (Mantic Minotaur), qt_version: '6' },
          { distribution: debian, codename: buster,   description: Debian 10.x (Buster),           qt_version: '5' }, # Qt 6 not available
          { distribution: debian, codename: bullseye, description: Debian 11.x (Bullseye),         qt_version: '5' }, # Qt 6 only available from bullseye-backports
          { distribution: debian, codename: bookworm, description: Debian 12.x (Bookworm),         qt_version: '6' },
          { distribution: debian, codename: trixie,   description: Debian 13.x (Trixie),           qt_version: '6' }
        ]
        architecture: [ [ amd64, linux/amd64  ], [ arm64, linux/arm64  ], [ armhf, linux/arm/v7 ], [ armel, linux/arm/v6 ] ]
        exclude:
          - os: { distribution: ubuntu }
            architecture: [ armel, linux/arm/v6 ]

    steps:
      - name: ‚¨á Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.head_sha || github.event.client_payload.head_sha }}
          submodules: recursive

      - name: üîß Prepare
        run: |
          echo '::group::Checking the version number'
            if [[ "${{ inputs.nightly }}" = true ]]; then
              echo "$(tr -d '\n' < .version)+nightly$(date '+%Y%m%d')$(git rev-parse --short HEAD)" > .version
            else
              tr -d '\n' < .version > temp && mv temp .version
            fi
          echo '::endgroup::'

          echo '::group::Generate environment variables'
            VERSION=$(cat .version)
            echo VERSION=${VERSION} >> $GITHUB_ENV
            if [[ $VERSION == *"-"* ]]; then
              echo STANDARDS_VERSION=$(echo ${VERSION%-*}) >> $GITHUB_ENV
              echo DEBIAN_FORMAT='3.0 (quilt)' >> $GITHUB_ENV
            else
              echo STANDARDS_VERSION=$(echo ${VERSION%+*}) >> $GITHUB_ENV
              echo DEBIAN_FORMAT='3.0 (native)' >> $GITHUB_ENV
            fi
          echo '::endgroup::'

      - name: üë∑ Build
        shell: bash
        run: |
          mkdir -p "${GITHUB_WORKSPACE}/deploy"
          docker run --rm --platform=${{ matrix.architecture[1] }} \
            -v "${GITHUB_WORKSPACE}/deploy:/deploy" \
            -v "${GITHUB_WORKSPACE}:/source:rw" \
            ghcr.io/${{ env.ghcr }}/${{ matrix.os.distribution }}:${{ env.DOCKER_IMAGE }} \
            /bin/bash -c "cd /source && \
            git config --global --add safe.directory '*' && \
            mkdir -p debian/source && echo '${{ env.DEBIAN_FORMAT }}' > debian/source/format && echo 10 > debian/compat && \
            dch --create --distribution ${{ matrix.os.codename }} --package 'hyperion' -v '${{ env.VERSION }}~${{ matrix.os.codename }}' '${{ github.event.commits[0].message }}' && \
            cp -fr LICENSE debian/copyright && \
            sed 's/@ARCHITECTURE@/${{ matrix.architecture[0] }}/g; s/@STANDARDS_VERSION@/${{ env.STANDARDS_VERSION }}/g' debian/control.in > debian/control && \
            debuild -b -uc -us && \
            cp ../hyperion_*.deb /deploy"
        env:
          DOCKER_IMAGE: ${{ matrix.os.qt_version == '6' && format('{0}-qt6', matrix.os.codename) || matrix.os.codename }}

      - name: üì¶ Upload
        if: ${{ inputs.upload }}
        uses: actions/upload-artifact@v3
        with:
          path: deploy
          retention-days: 1
