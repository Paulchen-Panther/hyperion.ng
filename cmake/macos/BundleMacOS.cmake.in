set(MAC_BUNDLE_INSTALL_DIR "${CMAKE_INSTALL_PREFIX}/@MAC_BUNDLE_NAME@.app")
set(MAC_BUNDLE_INSTALL_BIN_DIR "${MAC_BUNDLE_INSTALL_DIR}/Contents/MacOS")
set(MAC_BUNDLE_INSTALL_LIB_DIR "${MAC_BUNDLE_INSTALL_DIR}/Contents/Frameworks")
set(MAC_BUNDLE_INSTALL_PLUGIN_DIR "${MAC_BUNDLE_INSTALL_DIR}/Contents/Plugins")
set(MAC_BUNDLE_INSTALL_TMP_DIR "${MAC_BUNDLE_INSTALL_DIR}/Contents/tmp")
set(ENABLE_EFFECTENGINE @ENABLE_EFFECTENGINE@)

file(GET_RUNTIME_DEPENDENCIES
    EXECUTABLES "${MAC_BUNDLE_INSTALL_BIN_DIR}/@MAC_BUNDLE_NAME@"
    RESOLVED_DEPENDENCIES_VAR resolved_deps
    UNRESOLVED_DEPENDENCIES_VAR unresolved_deps
)

foreach(dependency ${resolved_deps})
    if(dependency MATCHES "\\.(dylib)$")
        file(INSTALL
            FILES ${dependency}
            DESTINATION ${MAC_BUNDLE_INSTALL_TMP_DIR}
            TYPE SHARED_LIBRARY
        )

        get_filename_component(dylib ${dependency} NAME)
        list(APPEND MAC_BUNDLE_INSTALL_LIB_LIST "${MAC_BUNDLE_INSTALL_LIB_DIR}/${dylib}")
    else()
        file(INSTALL
            FILES ${dependency}
            DESTINATION ${MAC_BUNDLE_INSTALL_TMP_DIR}
            TYPE SHARED_LIBRARY
            FOLLOW_SYMLINK_CHAIN
        )

        get_filename_component(tmp_libs ${dependency} NAME)
        list(APPEND MAC_BUNDLE_INSTALL_TMP_LIST "${MAC_BUNDLE_INSTALL_TMP_DIR}/${tmp_libs}")
    endif()
endforeach()

list(LENGTH unresolved_deps unresolved_length)
if("${unresolved_length}" GREATER 0)
    message(STATUS "The following unresolved dependencies were discovered: ${unresolved_deps}")
endif()

execute_process(
    COMMAND @QMAKE_EXECUTABLE@ -query QT_INSTALL_PLUGINS
    OUTPUT_VARIABLE QT_PLUGIN_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

foreach(PLUGIN "platforms" "sqldrivers" "imageformats" "tls")
    if(EXISTS ${QT_PLUGIN_DIR}/${PLUGIN})
        file(GLOB files "${QT_PLUGIN_DIR}/${PLUGIN}/*")
        if(PLUGIN STREQUAL "sqldrivers")
            list(FILTER files EXCLUDE REGEX ".*(sqlodbc|sqlpsql)\\.(dylib|dSYM)$")
        endif()
        foreach(file ${files})
            if(file MATCHES "\\.(dylib)$")
                file(GET_RUNTIME_DEPENDENCIES
                    LIBRARIES ${file}
                    RESOLVED_DEPENDENCIES_VAR PLUGINS
                    UNRESOLVED_DEPENDENCIES_VAR unresolved_deps
                )

                foreach(DEPENDENCY ${PLUGINS})
                    file(INSTALL
                        DESTINATION "${MAC_BUNDLE_INSTALL_TMP_DIR}"
                        TYPE SHARED_LIBRARY
                        FILES ${DEPENDENCY}
                        FOLLOW_SYMLINK_CHAIN
                    )
                endforeach()

                get_filename_component(singleQtLib ${file} NAME)
                list(APPEND QT_PLUGINS "${MAC_BUNDLE_INSTALL_PLUGIN_DIR}/${PLUGIN}/${singleQtLib}")
                file(INSTALL
                    FILES ${file}
                    DESTINATION "${MAC_BUNDLE_INSTALL_PLUGIN_DIR}/${PLUGIN}"
                    TYPE SHARED_LIBRARY
                )
            endif()
        endforeach()

        list(LENGTH unresolved_deps unresolved_length)
        if("${unresolved_length}" GREATER 0)
            message(STATUS "The following unresolved dependencies were discovered: ${unresolved_deps}")
        endif()
    endif()
endforeach()

execute_process(
    COMMAND @QMAKE_EXECUTABLE@ -query QT_HOST_LIBS
    OUTPUT_VARIABLE QT_HOST_LIBS_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

include(BundleUtilities)
fixup_bundle("${MAC_BUNDLE_INSTALL_DIR}" "${QT_PLUGINS}" "${MAC_BUNDLE_INSTALL_TMP_DIR};${QT_HOST_LIBS_DIR}" IGNORE_ITEM "Python")
file(REMOVE_RECURSE "${MAC_BUNDLE_INSTALL_TMP_DIR}")

if(ENABLE_EFFECTENGINE)
    # Detect the Python version and modules directory
    if(NOT CMAKE_VERSION VERSION_LESS "3.12")
        find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
        set(PYTHON_VERSION_MAJOR_MINOR "${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}")
        set(PYTHON_MODULES_DIR ${Python3_STDLIB})
    else()
        find_package (PythonLibs ${PYTHON_VERSION_STRING} EXACT)
        set(PYTHON_VERSION_MAJOR_MINOR "${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}")
        set(PYTHON_MODULES_DIR ${Python_STDLIB})
    endif()

    # Copy Python modules to '/../Frameworks/Python.framework/Versions/Current/lib/PythonMAJOR.MINOR' and ignore the unnecessary stuff listed below
    if (PYTHON_MODULES_DIR)
        set(PYTHON_FRAMEWORK "${MAC_BUNDLE_INSTALL_DIR}/Contents/Frameworks/Python.framework")
        file(
            COPY ${PYTHON_MODULES_DIR}/
            DESTINATION "${PYTHON_FRAMEWORK}/Versions/Current/lib/python${PYTHON_VERSION_MAJOR_MINOR}"
            PATTERN "*.pyc"                                 EXCLUDE # compiled bytecodes
            PATTERN "__pycache__"                           EXCLUDE # any cache
            PATTERN "config-${PYTHON_VERSION_MAJOR_MINOR}*" EXCLUDE # static libs
            PATTERN "lib2to3"                               EXCLUDE # automated Python 2 to 3 code translation
            PATTERN "tkinter"                               EXCLUDE # Tk interface
            PATTERN "turtledemo"                            EXCLUDE # Tk demo folder
            PATTERN "turtle.py"                             EXCLUDE # Tk demo file
            PATTERN "test"                                  EXCLUDE # unittest module
            PATTERN "sitecustomize.py"                      EXCLUDE # site-specific configs
        )
    endif()
endif()

foreach(item ${MAC_BUNDLE_INSTALL_LIB_LIST} ${QT_PLUGINS})
    set(cmd codesign --force --sign - "${item}")
    execute_process(
        COMMAND ${cmd}
        RESULT_VARIABLE codesign_result
    )

    if(NOT codesign_result EQUAL 0)
        message(WARNING "macOS signing failed; ${cmd} returned ${codesign_result}")
    endif()
endforeach()

execute_process(COMMAND codesign --deep --force --sign - ${PYTHON_FRAMEWORK} ${MAC_BUNDLE_INSTALL_DIR})
